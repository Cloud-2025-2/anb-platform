{
	"info": {
		"_postman_id": "3f198f4a-e293-4642-a741-d3c4848bf717",
		"name": "ANBPlatform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37575255"
	},
	"item": [
		{
			"name": "Sign Up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User creation successful\", function () {\r",
							"    // Check status code\r",
							"    pm.response.to.have.status(201);\r",
							"    \r",
							"    // Check message in response body\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User created successfully\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random email and set default password\r",
							"const rand = Date.now() + Math.floor(Math.random()*1000);\r",
							"const email = `user_${rand}@example.com`;\r",
							"pm.environment.set(\"current_email\", email);\r",
							"pm.environment.set(\"current_password\", \"StrongPass123\");\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Doe\",\r\n    \"email\": \"{{current_email}}\",\r\n    \"password1\": \"{{current_password}}\",\r\n    \"password2\": \"{{current_password}}\",\r\n    \"city\": \"Bogotá\",\r\n    \"country\": \"Colombia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up with Duplicate Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code 400 for duplicate email\", function () {\r",
							"    // Check status code\r",
							"    pm.response.to.have.status(400);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Doe\",\r\n    \"email\": \"{{current_email}}\",\r\n    \"password1\": \"{{current_password}}\",\r\n    \"password2\": \"{{current_password}}\",\r\n    \"city\": \"Bogotá\",\r\n    \"country\": \"Colombia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Save access token\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.environment.set(\"access_token\", response.access_token);\r",
							"    console.log(\"Access token saved!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{current_email}}\",\r\n    \"password\": \"{{current_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Video uploaded successfully\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verificar que existe el message de éxito\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.eql(\"Video uploaded successfully. Processing in progress.\");\r",
							"});\r",
							"\r",
							"// Test para verificar y guardar el task_id\r",
							"pm.test(\"Task ID received and saved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verificar que existe el task_id\r",
							"    pm.expect(jsonData).to.have.property('task_id');\r",
							"    pm.expect(jsonData.task_id).to.be.a('string');\r",
							"    \r",
							"    // Guardar el task_id en el ambiente\r",
							"    pm.environment.set(\"task_id\", jsonData.task_id);\r",
							"    \r",
							"    console.log(\"Task ID saved successfully:\", jsonData.task_id);\r",
							"});\r",
							"\r",
							"pm.test(\"Video ID received and saved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verificar que existe el task_id\r",
							"    pm.expect(jsonData).to.have.property('video_id');\r",
							"    pm.expect(jsonData.task_id).to.be.a('string');\r",
							"    \r",
							"    // Guardar el task_id en el ambiente\r",
							"    pm.environment.set(\"video_id\", jsonData.video_id);\r",
							"    \r",
							"    console.log(\"Video ID saved successfully:\", jsonData.video_id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "video_file",
							"description": ".mp4 file with a max file size of 100mb",
							"type": "file",
							"src": "./backend/assets/example.mp4"
						},
						{
							"key": "title",
							"value": "example1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/videos/upload",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Video Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Video uploaded successfully\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verificar que existe el message de éxito\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.eql(\"Video uploaded successfully. Processing in progress.\");\r",
							"});\r",
							"\r",
							"// Test para verificar y guardar el task_id\r",
							"pm.test(\"Task ID received and saved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verificar que existe el task_id\r",
							"    pm.expect(jsonData).to.have.property('task_id');\r",
							"    pm.expect(jsonData.task_id).to.be.a('string');\r",
							"    \r",
							"    // Guardar el task_id en el ambiente\r",
							"    pm.environment.set(\"task_id2\", jsonData.task_id);\r",
							"    \r",
							"    console.log(\"Task ID saved successfully:\", jsonData.task_id);\r",
							"});\r",
							"\r",
							"pm.test(\"Video ID received and saved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verificar que existe el task_id\r",
							"    pm.expect(jsonData).to.have.property('video_id');\r",
							"    pm.expect(jsonData.task_id).to.be.a('string');\r",
							"    \r",
							"    // Guardar el task_id en el ambiente\r",
							"    pm.environment.set(\"video_id2\", jsonData.video_id);\r",
							"    \r",
							"    console.log(\"Video ID saved successfully:\", jsonData.video_id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "video_file",
							"type": "file",
							"src": "./backend/assets/example2.mp4"
						},
						{
							"key": "title",
							"value": "example2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/videos/upload",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Health is OK\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.text()).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rankings by City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/rankings?city=Bogota&limit=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"rankings"
					],
					"query": [
						{
							"key": "city",
							"value": "Bogota"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Videos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to check if video_id exists in the list\r",
							"pm.test(\"My video_id is in the list\", function () {\r",
							"    const videos = pm.response.json();\r",
							"    const myVideoId = pm.environment.get(\"video_id\"); // Get video_id from environment\r",
							"    \r",
							"    // Check that response is an array\r",
							"    pm.expect(videos).to.be.an('array');\r",
							"    \r",
							"    // Find if our video_id exists in the list\r",
							"    const foundVideo = videos.find(video => video.ID === myVideoId);\r",
							"    \r",
							"    // Assert that the video was found\r",
							"    pm.expect(foundVideo).to.not.be.undefined;\r",
							"    \r",
							"    console.log(\"Video found:\", foundVideo);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/videos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Invalid User Videos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/videos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Video By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/videos/{{video_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos",
						"{{video_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Video With No Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/videos/0",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Public Videos",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/videos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"videos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Vote for Video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(() => {console.log('Waiting 20 seconds for video processing...');}, 20000);\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/videos/{{video_id}}/vote",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"videos",
						"{{video_id}}",
						"vote"
					]
				}
			},
			"response": []
		},
		{
			"name": "Repeat Vote for Video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/videos/{{video_id}}/vote",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"videos",
						"{{video_id}}",
						"vote"
					]
				}
			},
			"response": []
		},
		{
			"name": "Vote for Video No Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/videos/{{video_id}}/vote",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"videos",
						"{{video_id}}",
						"vote"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rankings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/rankings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"rankings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Video By ID with No Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/videos/{{video_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"videos",
						"{{video_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User deletion successful\", function () {\r",
							"    // Check status code\r",
							"    pm.response.to.have.status(204);\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		}
	]
}