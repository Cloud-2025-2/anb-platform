version: '3.8'

# Docker Compose for EC2 Webserver Instance
# This file runs: nginx, frontend, backend, postgres, redis, kafka, zookeeper
# Workers run on a separate EC2 instance
# Shared storage is on NFS EC2 instance

networks:
  anb-network:
    driver: bridge

services:
  postgres:
    image: postgres:15
    container_name: anb-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: anb_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - anb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: anb-redis
    ports:
      - "6379:6379"
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: anb-zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: anb-kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # IMPORTANT: Replace <WEBSERVER_PUBLIC_IP> with your EC2 public IP or domain
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://<WEBSERVER_PUBLIC_IP>:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "bash", "-c", "unset JMX_PORT; kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: anb-backend
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: anb_platform
      POSTGRES_PORT: 5432
      REDIS_ADDR: redis:6379
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE_MINUTES: 60
      APP_PORT: 8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      # Mount NFS storage - IMPORTANT: Replace with your NFS mount path
      - /mnt/nfs/anb-storage:/root/storage
    networks:
      - anb-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: anb-frontend
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    volumes:
      # Mount NFS storage for serving videos - IMPORTANT: Replace with your NFS mount path
      - /mnt/nfs/anb-storage:/var/www/storage
    networks:
      - anb-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: anb-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # Optional: SSL certificates
      # Mount NFS storage for serving videos via nginx
      - /mnt/nfs/anb-storage:/var/www/storage:ro
    depends_on:
      - backend
      - frontend
    networks:
      - anb-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

# Note: NFS storage should be mounted on host at /mnt/nfs/anb-storage
# Before starting, run on webserver EC2:
# sudo mkdir -p /mnt/nfs/anb-storage
# sudo mount -t nfs <NFS_EC2_IP>:/exports/anb-storage /mnt/nfs/anb-storage
# Add to /etc/fstab for persistence:
# <NFS_EC2_IP>:/exports/anb-storage /mnt/nfs/anb-storage nfs defaults,_netdev 0 0
